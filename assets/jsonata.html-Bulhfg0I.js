import{_ as r,r as s,o,c,a as t,b as n,w as d,d as e,e as i}from"./app-sKDtX2xl.js";const g={},u=i('<h1 id="jsonata" tabindex="-1"><a class="header-anchor" href="#jsonata" aria-hidden="true">#</a> JSONata</h1><p>JSONata is a <em>functional declarative</em> language, designed to work with JSON objects. It is built-in within Node-RED and is available in standard nodes where you see the <strong>J: expression</strong> option, for example in the <em>Inject Node</em>.</p><ul><li>JSONata code is written as a <em>line expression</em>, which is evaluated and returns the result.</li><li>The expression is evaluated against a JSON object. In Node-RED this JSON is the top level message object. There is no need to use a leading &#39;msg.&#39; therefore just <code>payload</code> will evaluate as the message payload <em>value</em>, and <code>topic</code> as the topic <em>value</em>.</li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>JSONata is very different to Mustache templates, and the use of <code>{{msg.payload}}</code> will not work as you might expect.</p></div><p>In the <strong>Home Assistant nodes</strong>, JSONata can be used to set entity states, set output property values, generate UI parameters, or as conditional tests (both generating the test value, and as an evaluated predicate expression).</p><table><thead><tr><th>HA Nodes</th><th style="text-align:center;">Set output property</th><th style="text-align:center;">Set state value</th><th style="text-align:center;">Construct data field</th><th style="text-align:center;">Conditional test value</th><th style="text-align:center;">Conditional Boolean</th><th style="text-align:center;">UI setting parameter</th><th style="text-align:center;">Example set (Xe)</th></tr></thead><tbody><tr><td>API</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Call service</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;">Xe</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">1</td></tr><tr><td>Current state</td><td style="text-align:center;">Xe</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Xe</td><td style="text-align:center;">Xe</td><td style="text-align:center;">Xe</td><td style="text-align:center;">2</td></tr><tr><td>Events: all</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Events: state</td><td style="text-align:center;">Xe</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Xe</td><td style="text-align:center;">Xe</td><td style="text-align:center;">X</td><td style="text-align:center;">3</td></tr><tr><td>Fire event</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Get entities</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Poll state</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;"></td></tr><tr><td>Tag</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Time</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">X</td><td style="text-align:center;"></td></tr><tr><td>Trigger: state</td><td style="text-align:center;">Xe</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Xe</td><td style="text-align:center;"></td><td style="text-align:center;">X</td><td style="text-align:center;">4</td></tr><tr><td>Wait until</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;"></td></tr><tr><td>Webhook</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td><strong>Entity Nodes</strong></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Binary sensor</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Button</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Sensor</td><td style="text-align:center;">X</td><td style="text-align:center;">Xe</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">5</td></tr><tr><td>Update config</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td><strong>Standard Nodes</strong></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Inject</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>Switch</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Xe</td><td style="text-align:center;">Xe</td><td style="text-align:center;">Xe</td><td style="text-align:center;">6</td></tr><tr><td>Change</td><td style="text-align:center;">Xe</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">7</td></tr></tbody></table><p><strong>Examples of using JSONata in the Home Assistant Nodes:</strong></p>',7),y=t("ul",null,[t("li",null,"Increase light brightness with remote"),t("li",null,"Set A/C target temperature and hvac mode"),t("li",null,"Send 'lights on' notification when leaving home"),t("li",null,"Extract weather forecast details from call return")],-1),x=t("ul",null,[t("li",null,"Report difference between A/C current and target temperatures"),t("li",null,"Report if A/C been cooling for more than 2 hours before 17:00"),t("li",null,"Report if A/C unit is running outside of 'office hours'")],-1),h=t("ul",null,[t("li",null,"Motion detection start, and motion ending only before 08:30 and after 17:30"),t("li",null,"Switch just turned off, and has been on for less than three minutes"),t("li",null,"Motion detection only before dawn and after dusk, with dusk and dawn times output")],-1),p=t("ul",null,[t("li",null,"Every minute before and after sunset"),t("li",null,"Automation events just before, at, and just after sunset"),t("li",null,"Adjust light brightness from 0 to 100 percent over sunset")],-1),m=t("ul",null,[t("li",null,"Provide a sensor with a count of the number of lights that are on"),t("li",null,"Provide an attribute array (list) of the lights that are on"),t("li",null,"Since I last looked, list which lights have been turned on, or off")],-1),f=t("ul",null,[t("li",null,"Select flow routing depending on state 'last changed ms' period in minutes")],-1),_=t("ul",null,[t("li",null,"Calculate when, and for how long, I have not been at home in the past week")],-1),v=t("ul",null,[t("li",null,"Reading node entity states and attributes"),t("li",null,"Reading all Home Assistant entities"),t("li",null,"Reading Areas, Devices, and their Entities")],-1),b=i("<p>There are several <em>additional</em> Home Assistant functions added for use in JSONata expressions, and these can only be used within the Home Assistant nodes.</p><ul><li><p><code>$entity()</code> returns the entity that triggered the node</p></li><li><p><code>$prevEntity()</code> returns the previous state entity if the node is an event node</p></li><li><p><code>$areaDevices(areaId)</code> returns all devices associated with a specific area ID.</p></li><li><p><code>$areaEntities(areaId)</code> returns all entities associated with a specific area ID.</p></li><li><p><code>$areas(lookup)</code> returns an area based on a provided lookup value, or all areas if no lookup value is provided. The lookup value can be an area ID, an entity ID, or a device ID.</p></li><li><p><code>$deviceEntities(device_id)</code> returns all entities associated with a specific device.</p></li><li><p><code>$device(lookup)</code> returns a device based on a provided lookup value. The lookup value can be an entity ID or a device name.</p></li><li><p><code>$entities()</code> returns all entities in the cache</p></li><li><p><code>$entities(entity_id)</code> returns a single entity from cache matching the given entity_id</p></li></ul>",2),X={href:"https://lodash.com/",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"$sampleSize(collection, [n=1])",-1),w={href:"https://lodash.com/docs/#sampleSize",target:"_blank",rel:"noopener noreferrer"},j=t("p",null,"Gets n random elements at unique keys from collection up to the size of collection.",-1),N=t("code",null,"$randomNumber([lower=0], [upper=1], [floating])",-1),S={href:"https://lodash.com/docs/#random",target:"_blank",rel:"noopener noreferrer"},I=t("p",null,"Produces a random number between the inclusive lower and upper bounds. If only one argument is provided a number between 0 and the given number is returned. If floating is true, or either lower or upper are floats, a floating-point number is returned instead of an integer.",-1),A=t("p",null,[t("strong",null,"Also see:")],-1),E={href:"https://docs.jsonata.org",target:"_blank",rel:"noopener noreferrer"},C={href:"http://try.jsonata.org",target:"_blank",rel:"noopener noreferrer"};function J(R,O){const l=s("RouterLink"),a=s("ExternalLinkIcon");return o(),c("div",null,[u,t("ol",null,[t("li",null,[n(l,{to:"/cookbook/jsonata/call-service.html"},{default:d(()=>[e("Call a service using JSONata to build the data object")]),_:1}),y]),t("li",null,[n(l,{to:"/cookbook/jsonata/current-state.html"},{default:d(()=>[e("Read the current state or attribute value of an entity")]),_:1}),x]),t("li",null,[n(l,{to:"/cookbook/jsonata/events-state.html"},{default:d(()=>[e("Listen for entity state or attribute changes")]),_:1}),h]),t("li",null,[n(l,{to:"/cookbook/jsonata/trigger-state.html"},{default:d(()=>[e("Trigger a flow from state change conditions")]),_:1}),p]),t("li",null,[n(l,{to:"/cookbook/jsonata/sensor.html"},{default:d(()=>[e("Write state and attribute values to an HA sensor")]),_:1}),m]),t("li",null,[n(l,{to:"/cookbook/jsonata/switch-node.html"},{default:d(()=>[e("Route flow (switch node) based on computed outcomes")]),_:1}),f]),t("li",null,[n(l,{to:"/cookbook/jsonata/change-node.html"},{default:d(()=>[e("Read state history and process the return JSON (change node)")]),_:1}),_]),t("li",null,[n(l,{to:"/cookbook/jsonata/functions.html"},{default:d(()=>[e("Using the additional $entity() functions in JSONata")]),_:1}),v])]),b,t("p",null,[e("Expose "),t("a",X,[e("Lodash"),n(a)]),e(" functions")]),t("ul",null,[t("li",null,[t("p",null,[k,e(),t("a",w,[e("https://lodash.com/docs/#sampleSize"),n(a)])]),j]),t("li",null,[t("p",null,[N,e(),t("a",S,[e("https://lodash.com/docs/#random"),n(a)])]),I])]),A,t("ul",null,[t("li",null,[t("a",E,[e("https://docs.jsonata.org"),n(a)])]),t("li",null,[t("a",C,[e("http://try.jsonata.org"),n(a)])])])])}const D=r(g,[["render",J],["__file","jsonata.html.vue"]]);export{D as default};
